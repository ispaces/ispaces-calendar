buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.gretty:gretty:+'
    }
}

repositories {
    jcenter()
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'org.gretty'

targetCompatibility = "1.8"
sourceCompatibility = "1.8"

List compileList =  [
      "javax.servlet:javax.servlet-api:${project.property('servlet.version')}"
    , "org.apache.logging.log4j:log4j-core:${project.property('log4j.version')}"
    , "org.apache.logging.log4j:log4j-api:${project.property('log4j.version')}"
    , "commons-lang:commons-lang:2.6"
    , "commons-net:commons-net:3.5"
    , "org.json:json:20140107"
    , "com.sun.mail:mailapi:1.5.6"
    , "com.sun.mail:smtp:1.5.6"
    , "mysql:mysql-connector-java:8.0.11"
    //, "com.atlassian.commonmark:commonmark:0.10.0"
    , "org.eclipse.jetty:apache-jsp:9.4.7.v20170914"
    , "org.mortbay.jasper:apache-el:8.5.23"
    , "org.eclipse.jetty:jetty-annotations:${project.property('jetty.version')}"
    , "org.eclipse.jetty:jetty-server:${project.property('jetty.version')}"
    , "org.eclipse.jetty:jetty-continuation:${project.property('jetty.version')}"
    , "org.eclipse.jetty:jetty-http:${project.property('jetty.version')}"
    , "org.eclipse.jetty:jetty-server:${project.property('jetty.version')}"
    , "org.eclipse.jetty:jetty-servlets:${project.property('jetty.version')}"
    , "org.eclipse.jetty:jetty-servlet:${project.property('jetty.version')}"
    , "org.eclipse.jetty:jetty-webapp:${project.property('jetty.version')}"
    , "org.eclipse.jetty:jetty-util:${project.property('jetty.version')}"
    , fileTree(dir: 'src/main/webapp/WEB-INF/lib', include: '*.jar')
]

gretty {
    servletContainer = 'jetty9.4'
    loggingLevel = 'DEBUG'
}

/*
 * For dependencies that should not go into the war file, use the "providedCompile" or "providedRuntime" scope.
 */
List providedCompileList = [
  //"javax.servlet:servlet-api:2.5"
  //"javax.servlet:servlet-api:3.1"
  //"javax.servlet:javax.servlet-api:3.1.0"
]

dependencies {
    compile compileList
    providedCompile providedCompileList
}

task deleteProperties(type: Delete) {
    println 'Executing '+project.name+'.deleteProperties(type: Delete)'
    delete 'src/main/webapp/WEB-INF/init.properties'
    followSymlinks = true
}

task copyView(type: Copy) {
    println 'Executing copyView'
    from('src/main/webapp/view') {
        include '**'
        exclude '**/*.bak'
    }
    into 'build/exploded-app/view'
}

task copyJavascript(type: Copy) {
    println 'Executing copyJavascript'
    from('src/main/js') {
        include '**/*.*'
        exclude '**/*.bak'
    }
    //into '../../ispaces/ispaces-javascript-server/src/main/webapp/view/js/classes'
    into '../ispaces-javascript-server/src/main/webapp/view/js/classes'
    //into 'src/main/webapp/view/js/classes'
}

task deployJavascript(type: Copy) {
    println 'Executing deployJavascript'
    from('src/main/js') {
        include '**/*.*'
        exclude '**/*.bak'
    }
    //into '../../ispaces/ispaces-javascript-server/build/exploded-app/view/js/classes'
    //into '../ispaces-javascript-server/build/exploded/view/js/classes'
    into '../../Javapoet/ispaces-javascript-server/build/exploded/view/js/classes'
    //into 'build/exploded/view/js/classes'
}

import org.apache.tools.ant.filters.ReplaceTokens

//task dev(dependsOn: [deleteProperties, copyView, copyJavascript]) {
task dev(dependsOn: [copyView, copyJavascript]) {
    println 'dev()'
    //println System.getenv("USERNAME")
    //println System.getenv("USERDOMAIN")
    def props = new Properties()
    //file("src/main/resources/"+System.getenv("USERNAME")+".properties").withInputStream { props.load(it) }
    //file("src/main/resources/"+System.getenv("USERDOMAIN")+".properties").withInputStream { props.load(it) }
    file("src/main/config/dev.properties").withInputStream { props.load(it) }
    println props.getProperty("protocol") +" "+props.getProperty("server") +":"+props.getProperty("port")
    copy {
        from 'src/main/config/init.properties'
        into 'src/main/webapp/WEB-INF'
        filter(
          ReplaceTokens
          , tokens: props
        )
    }
}

/*
 * https://discuss.gradle.org/t/how-to-automatically-create-exploded-war-without-invoking-a-seperate-task/4479
 */
task explodedWar(type: Copy) {
    into "$buildDir/exploded"
    with war
}

war.dependsOn explodedWar